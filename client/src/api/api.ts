/* tslint:disable */
/* eslint-disable */
/**
 * Solid Trello API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
  /**
   *
   * @type {string}
   * @memberof InlineObject
   */
  title: string;
  /**
   *
   * @type {number}
   * @memberof InlineObject
   */
  listOrder: number;
}
/**
 *
 * @export
 * @interface List
 */
export interface List {
  /**
   *
   * @type {number}
   * @memberof List
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof List
   */
  title: string;
  /**
   *
   * @type {Array<Task>}
   * @memberof List
   */
  tasks: Array<Task>;
  /**
   * Order of the list in the board
   * @type {number}
   * @memberof List
   */
  listOrder: number;
}
/**
 *
 * @export
 * @interface Task
 */
export interface Task {
  /**
   *
   * @type {number}
   * @memberof Task
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  title: string;
  /**
   * List id associated with this task
   * @type {number}
   * @memberof Task
   */
  listId: number;
  /**
   * Order of this task in the list
   * @type {number}
   * @memberof Task
   */
  taskOrder: number;
}

/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Create a list
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList: async (
      inlineObject: InlineObject,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inlineObject' is not null or undefined
      assertParamExists("createList", "inlineObject", inlineObject);
      const localVarPath = `/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inlineObject,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get all lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLists: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/lists`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ListsApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a list
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createList(
      inlineObject: InlineObject,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<List>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createList(
        inlineObject,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get all lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllLists(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<List>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLists(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ListsApiFp(configuration);
  return {
    /**
     * Create a list
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createList(inlineObject: InlineObject, options?: any): AxiosPromise<List> {
      return localVarFp
        .createList(inlineObject, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get all lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLists(options?: any): AxiosPromise<Array<List>> {
      return localVarFp
        .getAllLists(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
  /**
   * Create a list
   * @param {InlineObject} inlineObject
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public createList(inlineObject: InlineObject, options?: any) {
    return ListsApiFp(this.configuration)
      .createList(inlineObject, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get all lists
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ListsApi
   */
  public getAllLists(options?: any) {
    return ListsApiFp(this.configuration)
      .getAllLists(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
