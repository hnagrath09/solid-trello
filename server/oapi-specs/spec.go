// Package spec provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateUserDto defines model for CreateUserDto.
type CreateUserDto struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// CreateUserRes defines model for CreateUserRes.
type CreateUserRes struct {

	// JWT token
	Token string `json:"token"`
	User  User   `json:"user"`
}

// List defines model for List.
type List struct {
	Id string `json:"id"`

	// Order of the list in the board
	ListOrder int    `json:"listOrder"`
	Tasks     []Task `json:"tasks"`
	Title     string `json:"title"`
}

// LoginDto defines model for LoginDto.
type LoginDto struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// ReorderListsForm defines model for ReorderListsForm.
type ReorderListsForm struct {
	ListId    string `json:"listId"`
	ListOrder int    `json:"listOrder"`
}

// ReorderTasksForm defines model for ReorderTasksForm.
type ReorderTasksForm struct {
	TaskId string `json:"taskId"`

	// Order of this task in the list
	TaskOrder int `json:"taskOrder"`
}

// Task defines model for Task.
type Task struct {
	Id string `json:"id"`

	// List id associated with this task
	ListId string `json:"listId"`

	// Order of this task in the list
	TaskOrder int    `json:"taskOrder"`
	Title     string `json:"title"`
}

// UpdateListForm defines model for UpdateListForm.
type UpdateListForm struct {
	ListOrder *int    `json:"listOrder,omitempty"`
	Title     *string `json:"title,omitempty"`
}

// UpdateTaskForm defines model for UpdateTaskForm.
type UpdateTaskForm struct {

	// List id associated with this task
	ListId *string `json:"listId,omitempty"`

	// Order of this task in the list
	TaskOrder *int    `json:"taskOrder,omitempty"`
	Title     *string `json:"title,omitempty"`
}

// User defines model for User.
type User struct {
	Email string `json:"email"`
	Id    string `json:"id"`
	Name  string `json:"name"`
}

// Id defines model for id.
type Id string

// CreateListJSONBody defines parameters for CreateList.
type CreateListJSONBody struct {
	ListOrder int    `json:"listOrder"`
	Title     string `json:"title"`
}

// UpdateListJSONBody defines parameters for UpdateList.
type UpdateListJSONBody UpdateListForm

// ReorderListsJSONBody defines parameters for ReorderLists.
type ReorderListsJSONBody []ReorderListsForm

// LoginJSONBody defines parameters for Login.
type LoginJSONBody LoginDto

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody CreateUserDto

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody struct {
	ListId    string `json:"listId"`
	TaskOrder int    `json:"taskOrder"`
	Title     string `json:"title"`
}

// UpdateTaskJSONBody defines parameters for UpdateTask.
type UpdateTaskJSONBody UpdateTaskForm

// ReorderTasksJSONBody defines parameters for ReorderTasks.
type ReorderTasksJSONBody []ReorderTasksForm

// CreateListJSONRequestBody defines body for CreateList for application/json ContentType.
type CreateListJSONRequestBody CreateListJSONBody

// UpdateListJSONRequestBody defines body for UpdateList for application/json ContentType.
type UpdateListJSONRequestBody UpdateListJSONBody

// ReorderListsJSONRequestBody defines body for ReorderLists for application/json ContentType.
type ReorderListsJSONRequestBody ReorderListsJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody UpdateTaskJSONBody

// ReorderTasksJSONRequestBody defines body for ReorderTasks for application/json ContentType.
type ReorderTasksJSONRequestBody ReorderTasksJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateList request  with any body
	CreateListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateList(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateList request  with any body
	UpdateListWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateList(ctx context.Context, id Id, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLists request
	GetAllLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReorderLists request  with any body
	ReorderListsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReorderLists(ctx context.Context, body ReorderListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Login request  with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request  with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTask request  with any body
	CreateTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTask(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTask request  with any body
	UpdateTaskWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTask(ctx context.Context, id Id, body UpdateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReorderTasks request  with any body
	ReorderTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReorderTasks(ctx context.Context, body ReorderTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateList(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateList(ctx context.Context, id Id, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllListsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReorderListsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReorderListsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReorderLists(ctx context.Context, body ReorderListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReorderListsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTask(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTaskWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaskRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTask(ctx context.Context, id Id, body UpdateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaskRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReorderTasksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReorderTasksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReorderTasks(ctx context.Context, body ReorderTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReorderTasksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateListRequest calls the generic CreateList builder with application/json body
func NewCreateListRequest(server string, body CreateListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateListRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateListRequestWithBody generates requests for CreateList with any type of body
func NewCreateListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/list")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateListRequest calls the generic UpdateList builder with application/json body
func NewUpdateListRequest(server string, id Id, body UpdateListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateListRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateListRequestWithBody generates requests for UpdateList with any type of body
func NewUpdateListRequestWithBody(server string, id Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/list/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllListsRequest generates requests for GetAllLists
func NewGetAllListsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lists")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReorderListsRequest calls the generic ReorderLists builder with application/json body
func NewReorderListsRequest(server string, body ReorderListsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReorderListsRequestWithBody(server, "application/json", bodyReader)
}

// NewReorderListsRequestWithBody generates requests for ReorderLists with any type of body
func NewReorderListsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lists/reorder")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/login")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/me")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/signup")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTaskRequest calls the generic CreateTask builder with application/json body
func NewCreateTaskRequest(server string, body CreateTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTaskRequestWithBody generates requests for CreateTask with any type of body
func NewCreateTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/task")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateTaskRequest calls the generic UpdateTask builder with application/json body
func NewUpdateTaskRequest(server string, id Id, body UpdateTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTaskRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTaskRequestWithBody generates requests for UpdateTask with any type of body
func NewUpdateTaskRequestWithBody(server string, id Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/task/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReorderTasksRequest calls the generic ReorderTasks builder with application/json body
func NewReorderTasksRequest(server string, body ReorderTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReorderTasksRequestWithBody(server, "application/json", bodyReader)
}

// NewReorderTasksRequestWithBody generates requests for ReorderTasks with any type of body
func NewReorderTasksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tasks/reorder")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateList request  with any body
	CreateListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateListResponse, error)

	CreateListWithResponse(ctx context.Context, body CreateListJSONRequestBody) (*CreateListResponse, error)

	// UpdateList request  with any body
	UpdateListWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader) (*UpdateListResponse, error)

	UpdateListWithResponse(ctx context.Context, id Id, body UpdateListJSONRequestBody) (*UpdateListResponse, error)

	// GetAllLists request
	GetAllListsWithResponse(ctx context.Context) (*GetAllListsResponse, error)

	// ReorderLists request  with any body
	ReorderListsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ReorderListsResponse, error)

	ReorderListsWithResponse(ctx context.Context, body ReorderListsJSONRequestBody) (*ReorderListsResponse, error)

	// Login request  with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody) (*LoginResponse, error)

	// GetMe request
	GetMeWithResponse(ctx context.Context) (*GetMeResponse, error)

	// CreateUser request  with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody) (*CreateUserResponse, error)

	// CreateTask request  with any body
	CreateTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateTaskResponse, error)

	CreateTaskWithResponse(ctx context.Context, body CreateTaskJSONRequestBody) (*CreateTaskResponse, error)

	// UpdateTask request  with any body
	UpdateTaskWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader) (*UpdateTaskResponse, error)

	UpdateTaskWithResponse(ctx context.Context, id Id, body UpdateTaskJSONRequestBody) (*UpdateTaskResponse, error)

	// ReorderTasks request  with any body
	ReorderTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ReorderTasksResponse, error)

	ReorderTasksWithResponse(ctx context.Context, body ReorderTasksJSONRequestBody) (*ReorderTasksResponse, error)
}

type CreateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *List
}

// Status returns HTTPResponse.Status
func (r CreateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *List
}

// Status returns HTTPResponse.Status
func (r UpdateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]List
}

// Status returns HTTPResponse.Status
func (r GetAllListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReorderListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *List
}

// Status returns HTTPResponse.Status
func (r ReorderListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReorderListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateUserRes
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateUserRes
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Task
}

// Status returns HTTPResponse.Status
func (r CreateTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r UpdateTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReorderTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Task
}

// Status returns HTTPResponse.Status
func (r ReorderTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReorderTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateListWithBodyWithResponse request with arbitrary body returning *CreateListResponse
func (c *ClientWithResponses) CreateListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateListResponse, error) {
	rsp, err := c.CreateListWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateListResponse(rsp)
}

func (c *ClientWithResponses) CreateListWithResponse(ctx context.Context, body CreateListJSONRequestBody) (*CreateListResponse, error) {
	rsp, err := c.CreateList(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateListResponse(rsp)
}

// UpdateListWithBodyWithResponse request with arbitrary body returning *UpdateListResponse
func (c *ClientWithResponses) UpdateListWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader) (*UpdateListResponse, error) {
	rsp, err := c.UpdateListWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListResponse(rsp)
}

func (c *ClientWithResponses) UpdateListWithResponse(ctx context.Context, id Id, body UpdateListJSONRequestBody) (*UpdateListResponse, error) {
	rsp, err := c.UpdateList(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListResponse(rsp)
}

// GetAllListsWithResponse request returning *GetAllListsResponse
func (c *ClientWithResponses) GetAllListsWithResponse(ctx context.Context) (*GetAllListsResponse, error) {
	rsp, err := c.GetAllLists(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetAllListsResponse(rsp)
}

// ReorderListsWithBodyWithResponse request with arbitrary body returning *ReorderListsResponse
func (c *ClientWithResponses) ReorderListsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ReorderListsResponse, error) {
	rsp, err := c.ReorderListsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReorderListsResponse(rsp)
}

func (c *ClientWithResponses) ReorderListsWithResponse(ctx context.Context, body ReorderListsJSONRequestBody) (*ReorderListsResponse, error) {
	rsp, err := c.ReorderLists(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseReorderListsResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// CreateTaskWithBodyWithResponse request with arbitrary body returning *CreateTaskResponse
func (c *ClientWithResponses) CreateTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTaskWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateTaskWithResponse(ctx context.Context, body CreateTaskJSONRequestBody) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTask(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

// UpdateTaskWithBodyWithResponse request with arbitrary body returning *UpdateTaskResponse
func (c *ClientWithResponses) UpdateTaskWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader) (*UpdateTaskResponse, error) {
	rsp, err := c.UpdateTaskWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateTaskWithResponse(ctx context.Context, id Id, body UpdateTaskJSONRequestBody) (*UpdateTaskResponse, error) {
	rsp, err := c.UpdateTask(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaskResponse(rsp)
}

// ReorderTasksWithBodyWithResponse request with arbitrary body returning *ReorderTasksResponse
func (c *ClientWithResponses) ReorderTasksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ReorderTasksResponse, error) {
	rsp, err := c.ReorderTasksWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReorderTasksResponse(rsp)
}

func (c *ClientWithResponses) ReorderTasksWithResponse(ctx context.Context, body ReorderTasksJSONRequestBody) (*ReorderTasksResponse, error) {
	rsp, err := c.ReorderTasks(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseReorderTasksResponse(rsp)
}

// ParseCreateListResponse parses an HTTP response from a CreateListWithResponse call
func ParseCreateListResponse(rsp *http.Response) (*CreateListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateListResponse parses an HTTP response from a UpdateListWithResponse call
func ParseUpdateListResponse(rsp *http.Response) (*UpdateListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllListsResponse parses an HTTP response from a GetAllListsWithResponse call
func ParseGetAllListsResponse(rsp *http.Response) (*GetAllListsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAllListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReorderListsResponse parses an HTTP response from a ReorderListsWithResponse call
func ParseReorderListsResponse(rsp *http.Response) (*ReorderListsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReorderListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateUserRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateUserRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateTaskResponse parses an HTTP response from a CreateTaskWithResponse call
func ParseCreateTaskResponse(rsp *http.Response) (*CreateTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateTaskResponse parses an HTTP response from a UpdateTaskWithResponse call
func ParseUpdateTaskResponse(rsp *http.Response) (*UpdateTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReorderTasksResponse parses an HTTP response from a ReorderTasksWithResponse call
func ParseReorderTasksResponse(rsp *http.Response) (*ReorderTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReorderTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /list)
	CreateList(ctx echo.Context) error

	// (PATCH /list/{id})
	UpdateList(ctx echo.Context, id Id) error

	// (GET /lists)
	GetAllLists(ctx echo.Context) error

	// (POST /lists/reorder)
	ReorderLists(ctx echo.Context) error

	// (POST /login)
	Login(ctx echo.Context) error

	// (GET /me)
	GetMe(ctx echo.Context) error

	// (POST /signup)
	CreateUser(ctx echo.Context) error

	// (POST /task)
	CreateTask(ctx echo.Context) error

	// (PATCH /task/{id})
	UpdateTask(ctx echo.Context, id Id) error

	// (POST /tasks/reorder)
	ReorderTasks(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateList converts echo context to params.
func (w *ServerInterfaceWrapper) CreateList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateList(ctx)
	return err
}

// UpdateList converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateList(ctx, id)
	return err
}

// GetAllLists converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllLists(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllLists(ctx)
	return err
}

// ReorderLists converts echo context to params.
func (w *ServerInterfaceWrapper) ReorderLists(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReorderLists(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// CreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTask(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTask(ctx)
	return err
}

// UpdateTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTask(ctx, id)
	return err
}

// ReorderTasks converts echo context to params.
func (w *ServerInterfaceWrapper) ReorderTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReorderTasks(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/list", wrapper.CreateList)
	router.PATCH(baseURL+"/list/:id", wrapper.UpdateList)
	router.GET(baseURL+"/lists", wrapper.GetAllLists)
	router.POST(baseURL+"/lists/reorder", wrapper.ReorderLists)
	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/me", wrapper.GetMe)
	router.POST(baseURL+"/signup", wrapper.CreateUser)
	router.POST(baseURL+"/task", wrapper.CreateTask)
	router.PATCH(baseURL+"/task/:id", wrapper.UpdateTask)
	router.POST(baseURL+"/tasks/reorder", wrapper.ReorderTasks)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYXW/bNhf+KwTf99KJ7SRNA18tXbEiRYYVbbpdBLlgxGObDU1qJNUsCPzfh3MoWZIl",
	"f8h13AC7SSzx63nOl57DZ57YWWoNmOD56JmnwokZBHD0pCT9NXzEUxGmvMeNmAEf4UCPO/g7Uw4kHwWX",
	"QY/7ZAozgSvgHzFLNU6Eczg9Pzk/P0revhkenYmLwdEFnJ0evTlLxlK8Fcng5J73eHhKcbYPTpkJn8/n",
	"xW4E41cHIsBXD+59sITS2RRcUEDDMBNK14/1dgbWwC/5m+PEzpqnFGyqCz/aqWHvLbTNToX3j9bJ+orF",
	"2yaLqoluc5i96gI6/26x0N5/gyTgUSXjz5FjnXGwD2DwhwSfOJUGZdFHH/+6YXGoBX3mweGS/zsY8xH/",
	"X790fD+3dR8PbOAudqQN2sBeKx+aGJXcRyT0uFY+/OFkBF/nS6+ZHbMwBYbzmDL0+96KqkOUCTBBZj0e",
	"hH+I8ALM/CZ73Aj/QKviPsI58UTPKuilwLky7JOzEwfeb4wEyp64R4GoyrPVxnaizJ6jf9/x3Ib7M1jk",
	"hCHif7Nu1sSPvK9eIlYW2w2bgbBEJcewyQk5GYyKFWTQmfsig3ttDnzlGU4sIh8J8F4X7jnk6nlt3CkV",
	"XjTJo93qRK8pqSUT3ttEiQCSPaowLXlXub46S7cWCjQkG3arEYv4XO+jr6kUAdBmq1Ntq/TYqcKtgIN8",
	"N2X+f9npTbPlH+p9lfl95WgXsdQWzMX3YoXoQckHSeZUePqCn99I+x0IB+4yC1N8uqcnjCYRot7huVDE",
	"neJoCWYaQhq1pDJj+nLmnuFfrFaS3TjQ2rLLT1e8x7+D89H7w+PB8QAJ2xSMSBUf8VN61SMRTLD6utA8",
	"Nv6vB1CUb0wU8YKOFDiG4Z6PXschNBP48M7KJ9wnsSaAoS1FmmqV0LL+N29J75US+5CZXftcVErSqkqE",
	"a1pSOliWEPVG70Bn+NQaH+mcDIadjLFOw5GdV0GKeCTzWZKA9+NM66eYlWLikW7lXH6HA+T5/rOS89gu",
	"hWTa9H+sfKv8X5ZpCqmy4bptZ1JO6SvJ53e7B81a7V//eKxxYkYzt3Di4DBOjHg6O5FATqAlfT9AYEJr",
	"Fmctu+8DhEutr/OxH6K8VRMSuS83IU1b1FB3NkbfRXG7uqjl6pcVDUvdKlWh/wNlbSuLNJqKLaxDoh2j",
	"t+D5GmpQBJUj6hjB2BCudhb1i0wwatqXfUWD/GXKyKJRbctWApU4kGCCEtoftIbU71Ta4U1AHinTxQ9R",
	"E7WWkT+FVliZfLyUYcJI5iBkznjyC5MQhNKeqXHlxLZ68zvwFzRMfuvTWlBqODuYxauJydItFJKBx/Yg",
	"Ld31QpFav1Vs4Y9DLNc0h6wWGwOVgO0gXULRw693Sd5itbnjJg7tT7QuXZYMNzVqnbXtpZQM+bIcc6lC",
	"KfSKj9l2oreEsujJt1G/1P39HPUbbzBXQNoxhLZWv62BVN4KvD71u7irWOPEn6B+1zpxB/VLQb8nwXeT",
	"Dx5C8JUXr69d8K3z2C6Cr3I5QolSvRa5vcOk8OC+F2mUOZ1ff4z6fW0ToafWh9HF4GLAm6InEZrF1Xx+",
	"N/83AAD//y2MpfkRHAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

