/* tslint:disable */
/* eslint-disable */
/**
 * Solid Trello API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    title: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject
     */
    listOrder: number;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    title: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject1
     */
    taskOrder: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject1
     */
    listId: number;
}
/**
 * 
 * @export
 * @interface List
 */
export interface List {
    /**
     * 
     * @type {number}
     * @memberof List
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof List
     */
    title: string;
    /**
     * 
     * @type {Array<Task>}
     * @memberof List
     */
    tasks: Array<Task>;
    /**
     * Order of the list in the board
     * @type {number}
     * @memberof List
     */
    listOrder: number;
}
/**
 * 
 * @export
 * @interface ReorderTasksForm
 */
export interface ReorderTasksForm {
    /**
     * 
     * @type {number}
     * @memberof ReorderTasksForm
     */
    taskId: number;
    /**
     * Order of this task in the list
     * @type {number}
     * @memberof ReorderTasksForm
     */
    taskOrder: number;
}
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    title: string;
    /**
     * List id associated with this task
     * @type {number}
     * @memberof Task
     */
    listId: number;
    /**
     * Order of this task in the list
     * @type {number}
     * @memberof Task
     */
    taskOrder: number;
}
/**
 * 
 * @export
 * @interface UpdateTaskForm
 */
export interface UpdateTaskForm {
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskForm
     */
    title?: string;
    /**
     * Order of this task in the list
     * @type {number}
     * @memberof UpdateTaskForm
     */
    taskOrder?: number;
    /**
     * List id associated with this task
     * @type {number}
     * @memberof UpdateTaskForm
     */
    listId?: number;
}

/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a list
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList: async (inlineObject: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('createList', 'inlineObject', inlineObject)
            const localVarPath = `/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a task
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (inlineObject1: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject1' is not null or undefined
            assertParamExists('createTask', 'inlineObject1', inlineObject1)
            const localVarPath = `/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLists: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reorder tasks
         * @param {Array<ReorderTasksForm>} reorderTasksForm Tasks to reorder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderTasks: async (reorderTasksForm: Array<ReorderTasksForm>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reorderTasksForm' is not null or undefined
            assertParamExists('reorderTasks', 'reorderTasksForm', reorderTasksForm)
            const localVarPath = `/tasks/reorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reorderTasksForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a task
         * @param {number} taskId 
         * @param {UpdateTaskForm} updateTaskForm Task to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (taskId: number, updateTaskForm: UpdateTaskForm, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('updateTask', 'taskId', taskId)
            // verify required parameter 'updateTaskForm' is not null or undefined
            assertParamExists('updateTask', 'updateTaskForm', updateTaskForm)
            const localVarPath = `/task/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a list
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createList(inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<List>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createList(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a task
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(inlineObject1: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLists(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<List>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLists(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reorder tasks
         * @param {Array<ReorderTasksForm>} reorderTasksForm Tasks to reorder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderTasks(reorderTasksForm: Array<ReorderTasksForm>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderTasks(reorderTasksForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a task
         * @param {number} taskId 
         * @param {UpdateTaskForm} updateTaskForm Task to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(taskId: number, updateTaskForm: UpdateTaskForm, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(taskId, updateTaskForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationApiFp(configuration)
    return {
        /**
         * Create a list
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList(inlineObject: InlineObject, options?: any): AxiosPromise<List> {
            return localVarFp.createList(inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a task
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(inlineObject1: InlineObject1, options?: any): AxiosPromise<Task> {
            return localVarFp.createTask(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLists(options?: any): AxiosPromise<Array<List>> {
            return localVarFp.getAllLists(options).then((request) => request(axios, basePath));
        },
        /**
         * Reorder tasks
         * @param {Array<ReorderTasksForm>} reorderTasksForm Tasks to reorder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderTasks(reorderTasksForm: Array<ReorderTasksForm>, options?: any): AxiosPromise<Task> {
            return localVarFp.reorderTasks(reorderTasksForm, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a task
         * @param {number} taskId 
         * @param {UpdateTaskForm} updateTaskForm Task to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(taskId: number, updateTaskForm: UpdateTaskForm, options?: any): AxiosPromise<Task> {
            return localVarFp.updateTask(taskId, updateTaskForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationApi - object-oriented interface
 * @export
 * @class ApplicationApi
 * @extends {BaseAPI}
 */
export class ApplicationApi extends BaseAPI {
    /**
     * Create a list
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public createList(inlineObject: InlineObject, options?: any) {
        return ApplicationApiFp(this.configuration).createList(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a task
     * @param {InlineObject1} inlineObject1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public createTask(inlineObject1: InlineObject1, options?: any) {
        return ApplicationApiFp(this.configuration).createTask(inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public getAllLists(options?: any) {
        return ApplicationApiFp(this.configuration).getAllLists(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reorder tasks
     * @param {Array<ReorderTasksForm>} reorderTasksForm Tasks to reorder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public reorderTasks(reorderTasksForm: Array<ReorderTasksForm>, options?: any) {
        return ApplicationApiFp(this.configuration).reorderTasks(reorderTasksForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a task
     * @param {number} taskId 
     * @param {UpdateTaskForm} updateTaskForm Task to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public updateTask(taskId: number, updateTaskForm: UpdateTaskForm, options?: any) {
        return ApplicationApiFp(this.configuration).updateTask(taskId, updateTaskForm, options).then((request) => request(this.axios, this.basePath));
    }
}


